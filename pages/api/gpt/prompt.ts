import { OpenAI } from "openai";
import { NextApiRequest, NextApiResponse } from "next";
import Showdown from "showdown";
import slugify from "slugify";
import { prisma } from "@/lib/prisma";
import cloudinary from "@/lib/cloudinary";

const openai = new OpenAI({
  apiKey: process.env.API_KEY_GPT,
});
export const config = {
  maxDuration: 300, // Dur√©e maximale de 5 minutes
};
const strip_tags = (str: string) => {
  if (typeof str === "string") {
    return str.replace(/<\/?[^>]+(>|$)/g, "");
  }
  return "";
};

const retrievePrompt = async (req: NextApiRequest, res: NextApiResponse) => {
  try {
    // Configuring Showdown
    Showdown.extension("tasklists", function () {
      return [
        {
          type: "output",
          regex: /<li>\[ \](.*?)(<\/li>)/g,
          replace:
            '<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled> $1$2',
        },
        {
          type: "output",
          regex: /<li>\[x\](.*?)(<\/li>)/g,
          replace:
            '<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled checked> $1$2',
        },
      ];
    });

    const converter = new Showdown.Converter({
      extensions: ["tasklists"],
      tables: true,
      backslashEscapesHTMLTags: true,
    });

    console.log("‚öôÔ∏è  R√©ponse de GPT en cours de g√©n√©ration...");
    const response = await openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        { role: "system", content: req.body.promptSystem },
        { role: "user", content: req.body.prompt },
      ],
      temperature: req.body.temperature,
      max_tokens: req.body.max_tokens,
      top_p: req.body.top_p,
      frequency_penalty: req.body.frequency_penalty,
      presence_penalty: req.body.presence_penalty,
    });
    console.log("‚úÖ R√©ponse de GPT");

    const resp = response.choices[0].message.content;

    if (!resp) throw new Error("R√©ponse vide de GPT");

    console.log("‚öôÔ∏è  Cr√©ation du post...");
    const match = resp.match(/^#\s*(.*?)(\n|$)/);
    const title = match && match[1];
    const newContent = resp.replace(/^#\s*.*?(\n|$)/, "");
    const contentHTML = converter.makeHtml(newContent);
    // excerpt : prendre les 200 premiers caract√®res de la premi√®re balise <p> et terminer avec des ...
    // On cherche la premi√®re balise <p><P> et on extrait le contenu
    let firstParagraphContent;
    if (contentHTML) {
      const match = contentHTML.match(/<p>(.*?)<\/p>/);
      firstParagraphContent = match ? match[1] : "";
    } else {
      firstParagraphContent = "";
    }
    // On supprime les balises HTML
    const excerpt = strip_tags(firstParagraphContent).slice(0, 200) + "...";
    //
    if (!req.body.userId) throw new Error("UserId manquant");

    if (!title) {
      console.log("‚ùå Le titre n'a pas √©t√© trouv√©");
      return res.status(400).json({ error: "Le titre n'a pas √©t√© trouv√©" });
    }

    const newBlogPost = await prisma.blogPost.create({
      data: {
        title: title,
        canonicalSlug: slugify(title, {
          lower: true,
          strict: true,
          remove: /[*+~.()'"!:@]/g,
        }),
        content: contentHTML,
        excerpt: excerpt,
        published: false,
        authorId: req.body.userId,
        category: undefined,
        isIA: true,
      },
    });
    console.log("‚úÖ Post cr√©√©");
    // On r√©cup√®re l'ID du post
    const postId = newBlogPost.id;
    // On fait un nouvel appel √† GPT pour r√©cup√©rer les tags
    const responseTag = await openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        {
          role: "system",
          content: "Tu es expert en SEO",
        },
        {
          role: "user",
          content: `Donne 3 mots-cl√©s g√©n√©riques pour cet article, s√©par√©s par des points-virgules. Aucun autre commentaire, uniquement les mots cl√©s s√©par√©s par des virgules ! : ${newContent}`,
        },
      ],
      temperature: req.body.temperature,
      // max_tokens: req.body.max_tokens,
      max_tokens: 1000,
      top_p: req.body.top_p,
      frequency_penalty: req.body.frequency_penalty,
      presence_penalty: req.body.presence_penalty,
    });
    // On r√©cup√®re les tags
    const tags = responseTag.choices[0].message.content;
    if (tags) {
      console.log("‚öôÔ∏è  Cr√©ation des tags...");

      // Ils sont s√©par√©s par des ; donc on les split
      const tagsArray = tags
        .split(";")
        .map((tag) => tag.trim()[0].toUpperCase() + tag.trim().slice(1));

      // D√©marrez une transaction Prisma
      await prisma.$transaction(async (prisma) => {
        // 1. Recherchez les tags existants
        const existingTags = await prisma.blogTag.findMany({
          where: {
            name: {
              in: tagsArray,
            },
          },
        });

        // 2. Cr√©ez les nouveaux tags qui n'existent pas √† partir de la liste
        for (const tagName of tagsArray) {
          if (!existingTags.some((tag) => tag.name === tagName)) {
            let slug = slugify(tagName, {
              lower: true,
              remove: /[*+~.()'"!:@]/g,
            });
            let uniqueSlug = slug;
            let counter = 0;

            // V√©rifiez l'unicit√© du slug et ajustez si n√©cessaire
            while (
              await prisma.blogTag.findUnique({ where: { slug: uniqueSlug } })
            ) {
              uniqueSlug = `${slug}-${++counter}`;
            }

            // Cr√©er le tag avec le slug unique
            await prisma.blogTag.create({
              data: {
                name: tagName,
                slug: uniqueSlug,
              },
            });
          }
        }

        // 3. Obtenez les IDs des tags √† nouveau pour inclure les nouveaux tags
        const allTags = await prisma.blogTag.findMany({
          where: {
            name: {
              in: tagsArray,
            },
          },
        });

        // 4. Associez tous les tags au post dans blogTagOnPost
        await prisma.blogTagOnPost.deleteMany({
          where: {
            postId: postId,
          },
        });

        const tagPostAssociations = allTags.map((tag) => ({
          postId: postId,
          tagId: tag.id,
        }));

        await prisma.blogTagOnPost.createMany({
          data: tagPostAssociations,
          skipDuplicates: true, // Cette option saute les doublons
        });
      });

      console.log("‚úÖ Tags ajout√©s au post");
    }
    //
    let image;
    if (title) {
      console.log(
        `‚öôÔ∏è  Image en cours de g√©n√©ration pour le titre ¬´ ${title} ¬ª...`
      );
      image = await openai.images.generate({
        model: "dall-e-3",
        n: 1,
        prompt: `G√©n√®re une image dans le style Modern Art\n\n je ne veux pas que tu √©crives quelque chose.\n\n Je veux des paysages ou des personnes, des concepts, des id√©es, mais pas d'√©criture\n\nVoici le th√®me : ${req.body.prompt}`,
        size: "1792x1024",
      });
      console.log("‚úÖ Image g√©n√©r√©e");
    }
    // On envoie l'image sur Cloudinary :
    if (!image) throw new Error("Image manquante");
    const imageToUpload = image.data[0].url;
    //

    
    const uploadedResponse = await uploadAndRenameImage( imageToUpload ? imageToUpload : "", slugify(title, {
      lower: true,
      strict: true,
      remove: /[*+~.()'"!:@]/g,
    }))
      .then(result => {
        console.log("‚úÖ Image envoy√©e sur Cloudinary");
        console.log(`‚öôÔ∏è  Ajout de l'image au post...`);
        return result;
      }
      )
    .catch(error => console.error('Rename failed:', error));


    const imageToPost = uploadedResponse;
   
    // On ajoute l'image dans le post par un update via postId

    console.log("‚úÖ Image envoy√©e sur Cloudinary");
    console.log(`‚öôÔ∏è  Ajout de l'image au post...`);
    await prisma.blogPost.update({
      where: {
        id: postId,
      },
      data: {
        image: imageToPost ? imageToPost : imageToUpload,
      },
    });
    if (!imageToPost) {
      console.log(
        "‚ùå Erreur lors de l'envoi sur Cloudinary, l'image de DALLE-2 a √©t√© ajout√©e"
      );
    }
    console.log("ü•≥ Tout est pr√™t !");
    res.status(200).json(newBlogPost);
  } catch (error: any) {
    console.error(error.message);
    res.status(500).json({ error: error.message });
  }
};

export default retrievePrompt;


async function uploadAndRenameImage(imageToUpload:string, newName:string) {
  try {
    // T√©l√©verse l'image
    const uploadedResponse = await cloudinary.uploader.upload(
      imageToUpload || "", {
        resource_type: "image",
        aspect_ratio: "16:9",
        crop: "fill",
        gravity: "face",
        format: "webp",
      }
    );

    // V√©rifie si l'image a bien √©t√© t√©l√©vers√©e
    if (uploadedResponse.public_id) {
      // Renomme l'image t√©l√©vers√©e
      const renameResponse = await cloudinary.uploader.rename(
        uploadedResponse.public_id, 
        newName,
        { overwrite: false } // Changez cette option selon vos besoins
      );

      // Retourne la r√©ponse du renommage
      return renameResponse.secure_url;
    } else {
      throw new Error("Image upload failed");
    }
  } catch (error) {
    console.error("Error during image upload or rename:", error);
    throw error;
  }
}