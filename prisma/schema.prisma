// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Next AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application de base
enum UserRole {
  USER
  ADMIN
  EDITOR
  // Ajoutez d'autres rôles au besoin
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  date           DateTime?     @default(now())
  role           UserRole      @default(USER)
  accounts       Account[]
  sessions       Session[]
  order          Order[]
  posts          BlogPost[]
  comments       BlogComment[]
}

model Product {
  id                            String      @id @default(cuid())
  title                         String
  description                   String
  price                         Float
  imageUrl                      String?
  stock                         Int
  category                      Category    @relation(fields: [categoryId], references: [id])
  orderItems                    OrderItem[]
  categoryId                    String // Modifié à String
  display                       Boolean?
  rebate                        Float?
  rebateProgressive             Boolean?
  rebateProgressiveMaxInPercent Int?
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Order {
  id                 String      @id @default(cuid())
  date               DateTime    @default(now())
  firstName          String      @default("")
  lastName           String      @default("")
  orderRef           String?     @default("")
  userId             String
  addressName        String?
  address            String
  addressComp        String?
  addressBillingName String?
  addressBilling     String?
  addressBillingComp String?
  phone              String      @default("")
  amount             Float     @default(0)
  isSub              String?     @default("")
  monthly            Int?        @default(0)
  user               User        @relation(fields: [userId], references: [id])
  items              OrderItem[]
  payments           Payment[]
}

model Payment {
  id            String    @id @default(cuid())
  orderId       String
  paymentIntent String
  status        String
  amount        Float
  order         Order     @relation(fields: [orderId], references: [id])
  date          DateTime? @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  title     String  @default("")
  quantity  Float?
  amount    Float @default(0)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
}

model BlogPost {
  id             String          @id @default(cuid())
  title          String?
  canonicalSlug  String?          @unique
  excerpt        String?
  content        String?
  authorId       String
  author         User            @relation(fields: [authorId], references: [id])
  comments       BlogComment[]
  tags           BlogTagOnPost[]
  image          String?
  categoryId     String?
  category       BlogCategory?       @relation(fields: [categoryId], references: [id])
  published      Boolean         @default(false)
  publishedAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isIA           Boolean         @default(false)
}
model BlogCategory {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String?     @unique @default(cuid()) 
  posts BlogPost[]
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}


model BlogTag {
  id    String          @id @default(cuid())
  name  String          @unique
  slug  String?          @unique @default(cuid()) 
  posts BlogTagOnPost[]
}

model BlogTagOnPost {
  tagId  String
  tag    BlogTag  @relation(fields: [tagId], references: [id])
  postId String
  post   BlogPost @relation(fields: [postId], references: [id])

  @@id([tagId, postId])
}

// USER:
// Représente un utilisateur ou un client sur la plateforme.
// Stocke des informations personnelles comme le nom, l'e-mail, et une image éventuellement.
// Le champ hashedPassword est probablement pour l'authentification si vous décidez de permettre aux utilisateurs de s'inscrire par e-mail et mot de passe.
// Les relations avec les modèles Account et Session sont probablement pour l'authentification et la gestion des sessions.

// ACCOUNT:
// Est lié à la table User et semble être utilisé pour la connexion et l'authentification avec des fournisseurs externes (comme Google, Facebook, etc.).
// Stocke des tokens et d'autres informations de connexion fournies par ces services d'authentification.

// SESSION:
// Représente une session utilisateur pour un utilisateur connecté.
// sessionToken est utilisé pour identifier la session, et expires indique quand cette session expire.
// Est directement lié à un utilisateur, permettant de retracer une session à un utilisateur spécifique.

// VERIFICATIONTOKEN:
// Pourrait être utilisé pour vérifier certains éléments, comme une adresse e-mail lors de l'inscription, ou pour la récupération d'un mot de passe.

// PRODUCT:
// Représente un produit qui est vendu sur la plateforme.
// Contient des détails sur le produit tels que le titre, la description, le prix, etc.
// A une relation avec Category, permettant de classer le produit dans une catégorie spécifique.

// CATEGORY:
// Représente une catégorie de produits.
// Aide à organiser les produits en différents groupes ou collections, ce qui facilite la navigation pour les clients.

// ORDER:
// Représente une commande passée par un utilisateur.
// Contient la date de la commande et est liée à l'utilisateur qui a passé la commande.
// A une relation avec OrderItem, qui stocke les détails des produits spécifiques commandés.

// ORDERITEM:
// Représente un élément spécifique dans une commande.
// Par exemple, si une commande contient trois différents produits, il y aurait trois entrées distinctes dans OrderItem.
// Stocke des détails tels que la quantité commandée, le prix au moment de l'achat (très important car les prix peuvent varier), et est lié au produit spécifique qui a été commandé.
